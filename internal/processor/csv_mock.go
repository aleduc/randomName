// Code generated by MockGen. DO NOT EDIT.
// Source: csv.go

// Package processor is a generated GoMock package.
package processor

import (
	reflect "reflect"
	entity "test_quantcast/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReader) Read() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReaderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReader)(nil).Read))
}

// MockRowProcessor is a mock of RowProcessor interface.
type MockRowProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockRowProcessorMockRecorder
}

// MockRowProcessorMockRecorder is the mock recorder for MockRowProcessor.
type MockRowProcessorMockRecorder struct {
	mock *MockRowProcessor
}

// NewMockRowProcessor creates a new mock instance.
func NewMockRowProcessor(ctrl *gomock.Controller) *MockRowProcessor {
	mock := &MockRowProcessor{ctrl: ctrl}
	mock.recorder = &MockRowProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowProcessor) EXPECT() *MockRowProcessorMockRecorder {
	return m.recorder
}

// GetResult mocks base method.
func (m *MockRowProcessor) GetResult() entity.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResult")
	ret0, _ := ret[0].(entity.Result)
	return ret0
}

// GetResult indicates an expected call of GetResult.
func (mr *MockRowProcessorMockRecorder) GetResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockRowProcessor)(nil).GetResult))
}

// Process mocks base method.
func (m *MockRowProcessor) Process(input []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockRowProcessorMockRecorder) Process(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockRowProcessor)(nil).Process), input)
}

// MockPrinter is a mock of Printer interface.
type MockPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockPrinterMockRecorder
}

// MockPrinterMockRecorder is the mock recorder for MockPrinter.
type MockPrinterMockRecorder struct {
	mock *MockPrinter
}

// NewMockPrinter creates a new mock instance.
func NewMockPrinter(ctrl *gomock.Controller) *MockPrinter {
	mock := &MockPrinter{ctrl: ctrl}
	mock.recorder = &MockPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrinter) EXPECT() *MockPrinterMockRecorder {
	return m.recorder
}

// Print mocks base method.
func (m *MockPrinter) Print(result entity.Result) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Print", result)
}

// Print indicates an expected call of Print.
func (mr *MockPrinterMockRecorder) Print(result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockPrinter)(nil).Print), result)
}
